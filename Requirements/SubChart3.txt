<div class="col">
    <div class="card rounded-4">
        <div class="card-body">
            <div class="d-flex align-items-center justify-content-between mb-3">
                <div class="">
                    <h4 class="mb-0">111</h4>
                    <p class="mb-0">Youtube Subscribers</p>
                </div>
                <div class="fs-2 text-youtube">
                    <i class="bi bi-youtube"></i>
                </div>
            </div>
            <div id="chart9"></div>
        </div>
    </div>
</div>

------------------------------

@* _MonthlyExpensesChart.cshtml *@
<div class="col">
    <div class="card rounded-4">
        <div class="card-body">
            <div class="d-flex align-items-center justify-content-between mb-3">
                <div>
                    <h4 class="mb-0">Aylık Giderler</h4>
                    <p class="mb-0">Temel Masraflar (TL)</p>
                </div>
                <div class="fs-2 text-danger">
                    <i class="bi bi-pie-chart-fill"></i>
                </div>
            </div>
            <canvas id="monthlyExpensesChart"></canvas>
        </div>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctxExpenses = document.getElementById('monthlyExpensesChart').getContext('2d');
    const monthlyExpensesChart = new Chart(ctxExpenses, {
        type: 'pie',
        data: {
            labels: ['Elektrik', 'Personel', 'Temizlik', 'Vergi', 'Diğer'],
            datasets: [{
                label: 'Giderler',
                data: [5000, 20000, 3000, 10000, 2000],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(75, 192, 192, 0.7)',
                    'rgba(153, 102, 255, 0.7)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return context.label + ': ' + context.raw.toLocaleString('tr-TR') + " TL";
                        }
                    }
                },
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
</script>

-------------------------------

var oneMonthAgo = DateTime.Now.AddMonths(-1);

            // Son 1 ayın giderlerini kategoriye (Detail) göre grupluyoruz
            var expenseData = await _context.Expenses
                .Where(e => e.ProcessDate >= oneMonthAgo)
                .GroupBy(e => e.Detail)
                .Select(g => new
                {
                    Category = g.Key,
                    TotalAmount = g.Sum(x => x.Amount)
                })
                .ToListAsync();

            ViewBag.ExpenseLabels = expenseData.Select(x => x.Category).ToList();
            ViewBag.ExpenseValues = expenseData.Select(x => x.TotalAmount).ToList();

            return View();

            -------------------------------------------

<div class="col">
    <div class="card rounded-4">
        <div class="card-body">
            <div class="d-flex align-items-center justify-content-between mb-3">
                <div>
                    <h4 class="mb-0">Aylık Giderler</h4>
                    <p class="mb-0">Son 1 Ay (TL)</p>
                </div>
                <div class="fs-2 text-danger">
                    <i class="bi bi-pie-chart-fill"></i>
                </div>
            </div>
            <canvas id="monthlyExpensesChart"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctxExpenses = document.getElementById('monthlyExpensesChart').getContext('2d');
    const monthlyExpensesChart = new Chart(ctxExpenses, {
        type: 'pie', // istersen 'doughnut' yapabilirsin
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ExpenseLabels)),
            datasets: [{
                label: 'Giderler',
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ExpenseValues)),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(75, 192, 192, 0.7)',
                    'rgba(153, 102, 255, 0.7)',
                    'rgba(255, 159, 64, 0.7)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'bottom' },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return context.label + ': ' + context.raw.toLocaleString('tr-TR') + " TL";
                        }
                    }
                }
            }
        }
    });
</script>



--------------------------------------------------------------------------------------

 var currentMonth = DateTime.Now.Month;
            var currentYear = DateTime.Now.Year;

            // Sadece içinde bulunulan ayın giderlerini al
            var expenseData = await _context.Expenses
                .Where(e => e.ProcessDate.Month == currentMonth && e.ProcessDate.Year == currentYear)
                .GroupBy(e => e.Detail)
                .Select(g => new
                {
                    Category = g.Key,
                    TotalAmount = g.Sum(x => x.Amount)
                })
                .ToListAsync();

            ViewBag.ExpenseLabels = expenseData.Select(x => x.Category).ToList();
            ViewBag.ExpenseValues = expenseData.Select(x => x.TotalAmount).ToList();

            return View();


            --------------------------------------------------------------------------------------


